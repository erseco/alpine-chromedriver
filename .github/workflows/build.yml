name: buildx

on:
  push:
    branches:
      - main # beta
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+' # 3.20.7, 3.21.2, 3.22.0… avoid tagging without patch
  pull_request:

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      
    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # tags + full history

      # Detect whether the tag commit is also on main
      - name: Check main ancestry
        id: mainline
        if: ${{ github.ref_type == 'tag' }}
        run: |
          git fetch origin main --depth=1
          if git merge-base --is-ancestor origin/main "$GITHUB_SHA"; then
            echo "is_main=true"  >> "$GITHUB_OUTPUT"
          else
            echo "is_main=false" >> "$GITHUB_OUTPUT"
          fi

      # Extract metadata and prepare tags
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            docker.io/${{ github.repository }}
          tags: |
            # Always from a tag push -> 3.20.7  y  3.20
            type=semver,pattern={{version}},enable=${{ github.ref_type == 'tag' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.ref_type == 'tag' }}
            # latest only if tag belongs to main
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && steps.mainline.outputs.is_main == 'true' }}
            # beta on each push to main (no tag)
            type=raw,value=beta,enable=${{ github.ref == 'refs/heads/main' }}


      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Login to DockerHub and GHCR
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Lint Dockerfile
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v3.1.0
        with:
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint-dockerfile


      # Debug Build for PRs
      - name: Debug Build
        if: github.event_name == 'pull_request'
        run: |
          docker buildx build --load .

      # Test the built image
      - name: Test
        run: |
          docker compose version
          docker compose --file docker-compose.test.yml up --exit-code-from sut --timeout 10 --build

      # # Build and Push to both registries in one step
      # - name: Build and push
      #   if: github.event_name != 'pull_request'
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     platforms: linux/amd64,linux/arm/v7,linux/arm64
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max


      # 1) Build all (local, per-arch) — do NOT push "fat" images
      - name: Build all (local)
        if: github.event_name != 'pull_request'
        env:
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          set -euo pipefail
          # Use version when tagging; fallback for non-tag builds (e.g., beta on main)
          VER="${VERSION:-beta-${GITHUB_SHA::12}}"

          echo ">> Building fat images locally for ${VER}..."
          docker buildx build --platform linux/amd64  -t ghcr.io/${{ github.repository }}:${VER}-amd64  --load .
          docker buildx build --platform linux/arm64  -t ghcr.io/${{ github.repository }}:${VER}-arm64  --load .
          docker buildx build --platform linux/arm/v7 -t ghcr.io/${{ github.repository }}:${VER}-armv7  --load .

      # 2) Slim per-arch (overwrite) — enable HTTP probes to Chromedriver on :9515/status
      - name: Slim all (overwrite with HTTP probes)
        if: github.event_name != 'pull_request'
        env:
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          set -euo pipefail
          VER="${VERSION:-beta-${GITHUB_SHA::12}}"

          echo ">> Installing SlimToolkit (docker-slim) binary..."
          SLIM_VERSION="1.41.7"  # pin; change if you need a newer release
          curl -fsSL -o /tmp/slim.tgz "https://github.com/slimtoolkit/slim/releases/download/${SLIM_VERSION}/dist_linux.tar.gz"
          tar -xzf /tmp/slim.tgz -C /tmp
          # Find and install docker-slim binary
          SLIM_BIN="$(find /tmp -type f -name 'docker-slim' | head -n1)"
          sudo install -m 0755 "$SLIM_BIN" /usr/local/bin/docker-slim

          echo ">> Slimming amd64 (HTTP probe to :9515/status)..."
          docker-slim build \
            --target "ghcr.io/${{ github.repository }}:${VER}-amd64" \
            --overwrite true \
            --http-probe true \
            --http-probe-ports 9515 \
            --http-probe-cmd "http://localhost:9515/status" \
            --publish-port 9515

          echo ">> Slimming arm64 (HTTP probe to :9515/status)..."
          docker-slim build \
            --target "ghcr.io/${{ github.repository }}:${VER}-arm64" \
            --overwrite true \
            --http-probe true \
            --http-probe-ports 9515 \
            --http-probe-cmd "http://localhost:9515/status" \
            --publish-port 9515

          echo ">> Slimming armv7 (HTTP probe to :9515/status)..."
          docker-slim build \
            --target "ghcr.io/${{ github.repository }}:${VER}-armv7" \
            --overwrite true \
            --http-probe true \
            --http-probe-ports 9515 \
            --http-probe-cmd "http://localhost:9515/status" \
            --publish-port 9515

      # 3) Push slim per-arch + create multi-arch manifests for ALL metadata tags (same tags as before)
      - name: Push (per-arch) + Multi-arch manifests (GHCR & Docker Hub)
        if: github.event_name != 'pull_request'
        env:
          REPO_GHCR: ghcr.io/${{ github.repository }}
          REPO_DH:   docker.io/${{ github.repository }}
          VERSION:   ${{ steps.meta.outputs.version }}
          TAGS:      ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          VER="${VERSION:-beta-${GITHUB_SHA::12}}"

          echo ">> Pushing per-arch slim images to GHCR..."
          for A in amd64 arm64 armv7; do
            docker push "${REPO_GHCR}:${VER}-${A}"
          done

          echo ">> Mirroring per-arch slim images to Docker Hub..."
          for A in amd64 arm64 armv7; do
            docker tag  "${REPO_GHCR}:${VER}-${A}" "${REPO_DH}:${VER}-${A}"
            docker push "${REPO_DH}:${VER}-${A}"
          done

          echo ">> Creating multi-arch manifests for every tag from metadata-action..."
          echo "$TAGS" | tr ' ' '\n' | sed '/^\s*$/d' > /tmp/tags_list

          while read -r FULLTAG; do
            # FULLTAG examples:
            #   ghcr.io/owner/repo:3.22.0
            #   docker.io/owner/repo:latest
            REG="${FULLTAG%%/*}"           # ghcr.io or docker.io
            REST="${FULLTAG#*/}"           # owner/repo:tag
            REPO="${REST%:*}"              # owner/repo
            TAG="${REST#*:}"               # tag (e.g., 3.22.0, 3.22, latest, beta)

            SRC_AMD64="${REG}/${REPO}:${VER}-amd64"
            SRC_ARM64="${REG}/${REPO}:${VER}-arm64"
            SRC_ARMV7="${REG}/${REPO}:${VER}-armv7"

            echo ">> Manifest ${REG}/${REPO}:${TAG}"
            docker manifest create "${REG}/${REPO}:${TAG}" \
              "${SRC_AMD64}" "${SRC_ARM64}" "${SRC_ARMV7}" || true

            docker manifest annotate "${REG}/${REPO}:${TAG}" "${SRC_AMD64}" --os linux --arch amd64 || true
            docker manifest annotate "${REG}/${REPO}:${TAG}" "${SRC_ARM64}" --os linux --arch arm64 || true
            docker manifest annotate "${REG}/${REPO}:${TAG}" "${SRC_ARMV7}" --os linux --arch arm  || true

            docker manifest push "${REG}/${REPO}:${TAG}"
          done < /tmp/tags_list

          echo ">> Done. Published ONLY slim images under your usual tags."




      # Run Trivy vulnerability scanner ── only tags on main
      - name: Run Trivy vulnerability scanner
        if: github.ref_type == 'tag' && steps.mainline.outputs.is_main == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'


      # Update Docker Hub Description
      - name: Docker Hub Description
        if: startsWith(github.ref, 'refs/tags/') && contains(join(steps.meta.outputs.tags, '\n'), 'latest')
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ github.event.repository.description }}

